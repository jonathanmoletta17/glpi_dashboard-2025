#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GLPI Metrics Collector - Script Consolidado para Coleta de M√©tricas

Este script serve como documenta√ß√£o viva e ferramenta centralizada para coleta
de todas as m√©tricas necess√°rias do sistema GLPI, incluindo:
- M√©tricas gerais do sistema
- Tickets novos
- Ranking de t√©cnicos por n√≠vel
- Status de tickets por n√≠vel de atendimento

Autor: Sistema de Engenharia
Data: 2025-01-22
Vers√£o: 1.0
"""

import json
import os
from dataclasses import dataclass
from datetime import datetime
from typing import Any, Dict, List, Optional

import requests
from colorama import Fore, Style, init

# Inicializar colorama para cores no terminal
init(autoreset=True)


@dataclass
class GLPIConfig:
    """Configura√ß√£o para conex√£o com GLPI"""

    base_url: str
    app_token: str
    user_token: str
    username: str
    password: str

    @classmethod
    def from_env(cls) -> "GLPIConfig":
        """Carrega configura√ß√£o das vari√°veis de ambiente"""
        return cls(
            base_url=os.getenv("GLPI_BASE_URL", "http://localhost/glpi"),
            app_token=os.getenv("GLPI_APP_TOKEN", ""),
            user_token=os.getenv("GLPI_USER_TOKEN", ""),
            username=os.getenv("GLPI_USERNAME", ""),
            password=os.getenv("GLPI_PASSWORD", ""),
        )


class GLPIMetricsCollector:
    """
    Coletor centralizado de m√©tricas do GLPI

    Este coletor implementa todas as funcionalidades necess√°rias para:
    1. Autentica√ß√£o segura com session tokens
    2. Coleta de m√©tricas gerais
    3. Listagem de tickets novos
    4. Ranking de t√©cnicos por n√≠vel
    5. An√°lise de status por n√≠vel de atendimento
    """

    def __init__(self, config: GLPIConfig):
        self.config = config
        self.session_token: Optional[str] = None
        self.session = requests.Session()

        # Headers padr√£o para todas as requisi√ß√µes
        self.session.headers.update(
            {"Content-Type": "application/json", "App-Token": self.config.app_token}
        )

        # Mapeamento de cores por n√≠vel de t√©cnico
        self.level_colors = {
            "N1": Fore.GREEN,  # Verde para N1 (J√∫nior)
            "N2": Fore.YELLOW,  # Amarelo para N2 (Pleno)
            "N3": Fore.BLUE,  # Azul para N3 (S√™nior)
            "N4": Fore.RED,  # Vermelho para N4 (Especialista)
        }

        # Status de tickets mapeados
        self.ticket_status = {
            1: "novo",  # Novo
            2: "em_progresso",  # Processando (atribu√≠do)
            3: "planejado",  # Processando (planejado)
            4: "pendente",  # Pendente
            5: "solucionado",  # Solucionado
            6: "fechado",  # Fechado
        }

    def login(self) -> bool:
        """
        Realiza autentica√ß√£o no GLPI e obt√©m session token

        Endpoint: POST /apirest.php/initSession

        M√©todos de autentica√ß√£o suportados:
        1. User Token (recomendado para automa√ß√£o)
        2. Username/Password (para usu√°rios interativos)

        Returns:
            bool: True se autentica√ß√£o foi bem-sucedida
        """
        print(f"{Fore.CYAN}Iniciando autenticacao no GLPI...{Style.RESET_ALL}")

        url = f"{self.config.base_url}/apirest.php/initSession"

        # Tentar autentica√ß√£o com user token primeiro
        if self.config.user_token:
            headers = {"Authorization": f"user_token {self.config.user_token}"}
            print(f"{Fore.YELLOW}   Usando User Token para autentica√ß√£o{Style.RESET_ALL}")
        else:
            # Fallback para username/password
            auth_data = {"login": self.config.username, "password": self.config.password}
            headers = {}
            print(f"{Fore.YELLOW}   Usando Username/Password para autentica√ß√£o{Style.RESET_ALL}")

        try:
            if self.config.user_token:
                response = self.session.get(url, headers=headers)
            else:
                response = self.session.post(url, json=auth_data, headers=headers)

            response.raise_for_status()

            auth_response = response.json()
            self.session_token = auth_response.get("session_token")

            if self.session_token:
                # Adicionar session token aos headers padr√£o
                self.session.headers.update({"Session-Token": self.session_token})
                print(f"{Fore.GREEN}Autenticacao realizada com sucesso!{Style.RESET_ALL}")
                print(f"{Fore.CYAN}   Session Token: {self.session_token[:20]}...{Style.RESET_ALL}")
                return True
            else:
                print(
                    f"{Fore.RED}‚ùå Falha na autentica√ß√£o: Session token n√£o recebido{Style.RESET_ALL}"
                )
                return False

        except requests.exceptions.RequestException as e:
            print(f"{Fore.RED}‚ùå Erro na autentica√ß√£o: {e}{Style.RESET_ALL}")
            return False
        except json.JSONDecodeError as e:
            print(f"{Fore.RED}‚ùå Erro ao decodificar resposta de autentica√ß√£o: {e}{Style.RESET_ALL}")
            return False

    def get_status_geral(self) -> Dict[str, Any]:
        """
        Coleta m√©tricas gerais do sistema (sem filtro de n√≠vel)

        Endpoint: GET /apirest.php/search/Ticket

        Par√¢metros utilizados:
        - forcedisplay[0]: ID do ticket
        - forcedisplay[1]: Status do ticket
        - forcedisplay[2]: Prioridade
        - forcedisplay[3]: Data de cria√ß√£o
        - range: 0-9999 (todos os tickets)

        Returns:
            Dict contendo contadores por status
        """
        print(f"{Fore.CYAN}üìä Coletando m√©tricas gerais do sistema...{Style.RESET_ALL}")

        url = f"{self.config.base_url}/apirest.php/search/Ticket"

        params = {
            "forcedisplay[0]": 2,  # ID
            "forcedisplay[1]": 12,  # Status
            "forcedisplay[2]": 3,  # Prioridade
            "forcedisplay[3]": 15,  # Data de cria√ß√£o
            "range": "0-9999",  # Todos os tickets
        }

        try:
            response = self.session.get(url, params=params)
            response.raise_for_status()

            data = response.json()
            tickets = data.get("data", [])

            # Contar tickets por status
            status_count = {
                "novo": 0,
                "em_progresso": 0,
                "planejado": 0,
                "pendente": 0,
                "solucionado": 0,
                "fechado": 0,
            }
            total_tickets = len(tickets)

            for ticket in tickets:
                status_id = ticket.get("12")  # Campo de status
                if status_id and int(status_id) in self.ticket_status:
                    status_name = self.ticket_status[int(status_id)]
                    status_count[status_name] += 1

            metrics = {
                "total_tickets": total_tickets,
                "status_breakdown": status_count,
                "timestamp": datetime.now().isoformat(),
                "endpoint_used": url,
            }

            print(
                f"{Fore.GREEN}‚úÖ M√©tricas gerais coletadas: {total_tickets} tickets total{Style.RESET_ALL}"
            )

            # Exibir resumo
            for status, count in status_count.items():
                if count > 0:
                    print(f"   {status.title()}: {count}")

            return metrics

        except requests.exceptions.RequestException as e:
            print(f"{Fore.RED}‚ùå Erro ao coletar m√©tricas gerais: {e}{Style.RESET_ALL}")
            return {}
        except json.JSONDecodeError as e:
            print(f"{Fore.RED}‚ùå Erro ao decodificar resposta de m√©tricas: {e}{Style.RESET_ALL}")
            return {}

    def get_tickets_novos(self) -> List[Dict[str, Any]]:
        """
        Lista todos os tickets em status "Novo" (status = 1)

        Endpoint: GET /apirest.php/search/Ticket

        Crit√©rios de busca:
        - Status = 1 (Novo)
        - Ordena√ß√£o por data de cria√ß√£o (mais recentes primeiro)

        Campos retornados:
        - ID do ticket
        - T√≠tulo/Nome
        - Status
        - Prioridade
        - Data de cria√ß√£o
        - T√©cnico atribu√≠do (se houver)

        Returns:
            Lista de tickets novos
        """
        print(f"{Fore.CYAN}üé´ Coletando tickets novos...{Style.RESET_ALL}")

        url = f"{self.config.base_url}/apirest.php/search/Ticket"

        params = {
            "criteria[0][field]": 12,  # Campo de status
            "criteria[0][searchtype]": "equals",
            "criteria[0][value]": 1,  # Status "Novo"
            "forcedisplay[0]": 2,  # ID
            "forcedisplay[1]": 1,  # Nome/T√≠tulo
            "forcedisplay[2]": 12,  # Status
            "forcedisplay[3]": 3,  # Prioridade
            "forcedisplay[4]": 15,  # Data de cria√ß√£o
            "forcedisplay[5]": 5,  # T√©cnico atribu√≠do
            "order": "DESC",  # Mais recentes primeiro
            "sort": 15,  # Ordenar por data de cria√ß√£o
            "range": "0-100",  # Limitar a 100 tickets
        }

        try:
            response = self.session.get(url, params=params)
            response.raise_for_status()

            data = response.json()
            tickets = data.get("data", [])

            tickets_novos = []
            for ticket in tickets:
                ticket_info = {
                    "id": ticket.get("2"),
                    "titulo": ticket.get("1"),
                    "status": "novo",
                    "prioridade": ticket.get("3"),
                    "data_criacao": ticket.get("15"),
                    "tecnico_atribuido": ticket.get("5"),
                }
                tickets_novos.append(ticket_info)

            print(f"{Fore.GREEN}‚úÖ Encontrados {len(tickets_novos)} tickets novos{Style.RESET_ALL}")

            # Exibir primeiros 5 tickets como exemplo
            if tickets_novos:
                print(f"{Fore.YELLOW}   Primeiros 5 tickets novos:{Style.RESET_ALL}")
                for i, ticket in enumerate(tickets_novos[:5]):
                    print(f"   {i+1}. ID: {ticket['id']} - {ticket['titulo'][:50]}...")

            return tickets_novos

        except requests.exceptions.RequestException as e:
            print(f"{Fore.RED}‚ùå Erro ao coletar tickets novos: {e}{Style.RESET_ALL}")
            return []
        except json.JSONDecodeError as e:
            print(f"{Fore.RED}‚ùå Erro ao decodificar resposta de tickets: {e}{Style.RESET_ALL}")
            return []

    def get_ranking_tecnicos(self) -> Dict[str, List[Dict[str, Any]]]:
        """
        Coleta ranking de t√©cnicos seguindo a implementa√ß√£o real do backend

        Processo baseado no glpi_service.py:
        1. Buscar todos os t√©cnicos ativos com perfil t√©cnico (Profile_User)
        2. Para cada t√©cnico, determinar o n√≠vel baseado nos grupos GLPI
        3. Calcular m√©tricas de tickets (total, resolvidos, pendentes)
        4. Organizar ranking por n√≠vel
        5. Retornar ranking estruturado

        Returns:
            Dict com ranking por n√≠vel: {'N1': [...], 'N2': [...], etc}
        """
        print(
            f"{Fore.CYAN}üèÜ Coletando ranking de t√©cnicos (implementa√ß√£o real do backend)...{Style.RESET_ALL}"
        )

        # Mapeamento de n√≠veis para IDs de grupos GLPI (conforme backend)
        service_levels = {
            "N1": 89,  # CC-SE-SUBADM-DTIC > N1
            "N2": 90,  # CC-SE-SUBADM-DTIC > N2
            "N3": 91,  # CC-SE-SUBADM-DTIC > N3
            "N4": 92,  # CC-SE-SUBADM-DTIC > N4
        }

        ranking_por_nivel = {"N1": [], "N2": [], "N3": [], "N4": []}

        try:
            print(f"{Fore.BLUE}   Buscando t√©cnicos ativos com perfil t√©cnico...{Style.RESET_ALL}")

            # 1. Buscar todos os t√©cnicos ativos (m√©todo do backend)
            tecnicos_ativos = self._get_all_active_technicians()

            if not tecnicos_ativos:
                print(f"{Fore.YELLOW}   ‚ö†Ô∏è  Nenhum t√©cnico ativo encontrado{Style.RESET_ALL}")
                return ranking_por_nivel

            print(
                f"{Fore.GREEN}   ‚úÖ Encontrados {len(tecnicos_ativos)} t√©cnicos ativos{Style.RESET_ALL}"
            )

            # 2. Para cada t√©cnico, determinar n√≠vel e calcular m√©tricas
            for tecnico in tecnicos_ativos:
                try:
                    tecnico_id = tecnico["id"]
                    tecnico_nome = tecnico["nome"]

                    # Determinar n√≠vel do t√©cnico baseado nos grupos GLPI
                    nivel = self._get_technician_level_from_groups(tecnico_id)

                    if not nivel or nivel not in service_levels:
                        print(
                            f"{Fore.YELLOW}      ‚ö†Ô∏è  T√©cnico {tecnico_nome} n√£o est√° em grupo de n√≠vel v√°lido{Style.RESET_ALL}"
                        )
                        continue

                    # Calcular m√©tricas do t√©cnico
                    metricas = self._get_technician_metrics_corrected(tecnico_id)

                    tecnico_data = {
                        "id": tecnico_id,
                        "nome": tecnico_nome,
                        "nivel": nivel,
                        "grupo_id": service_levels[nivel],
                        "posicao": 0,  # Ser√° calculado ap√≥s ordena√ß√£o
                        "tickets_total": metricas.get("total", 0),
                        "tickets_resolvidos": metricas.get("resolvidos", 0),
                        "tickets_pendentes": metricas.get("pendentes", 0),
                        "taxa_resolucao": metricas.get("taxa_resolucao", 0.0),
                    }

                    ranking_por_nivel[nivel].append(tecnico_data)

                except Exception as e:
                    print(
                        f"{Fore.RED}      ‚ùå Erro ao processar t√©cnico {tecnico.get('nome', 'Desconhecido')}: {e}{Style.RESET_ALL}"
                    )
                    continue

            # 3. Ordenar t√©cnicos por n√≠vel (por tickets resolvidos)
            for nivel in ranking_por_nivel:
                ranking_por_nivel[nivel].sort(key=lambda x: x["tickets_resolvidos"], reverse=True)

                # Atualizar posi√ß√µes
                for i, tecnico in enumerate(ranking_por_nivel[nivel]):
                    tecnico["posicao"] = i + 1

            # 4. Exibir resumo colorido
            print(f"{Fore.GREEN}‚úÖ Ranking de t√©cnicos coletado:{Style.RESET_ALL}")
            for nivel, tecnicos_nivel in ranking_por_nivel.items():
                if tecnicos_nivel:
                    color = self.level_colors.get(nivel, Fore.WHITE)
                    print(f"{color}   {nivel}: {len(tecnicos_nivel)} t√©cnicos{Style.RESET_ALL}")

                    # Mostrar top 3 t√©cnicos de cada n√≠vel
                    for tecnico in tecnicos_nivel[:3]:
                        print(
                            f"{color}      {tecnico['posicao']}¬∫ {tecnico['nome']} - {tecnico['tickets_resolvidos']} resolvidos ({tecnico['tickets_total']} total){Style.RESET_ALL}"
                        )

            return ranking_por_nivel

        except Exception as e:
            print(f"{Fore.RED}‚ùå Erro ao coletar ranking: {str(e)}{Style.RESET_ALL}")
            return ranking_por_nivel

    def get_status_por_nivel(self) -> Dict[str, Dict[str, int]]:
        """
        Coleta contagem de tickets por status, separado por n√≠vel de atendimento

        Implementa√ß√£o baseada no backend real:
        1. Para cada n√≠vel (N1, N2, N3, N4):
        2. Buscar tickets atribu√≠dos ao grupo GLPI desse n√≠vel
        3. Contar por status usando o mapeamento correto

        Returns:
            Dict aninhado: {nivel: {status: count}}
        """
        print(
            f"{Fore.CYAN}üìà Coletando status de tickets por n√≠vel (implementa√ß√£o real do backend)...{Style.RESET_ALL}"
        )

        # Mapeamento de status conforme backend
        status_map = {
            1: "novo",
            2: "em_progresso",
            3: "planejado",
            4: "pendente",
            5: "solucionado",
            6: "fechado",
        }

        status_por_nivel = {
            "N1": {
                "novo": 0,
                "em_progresso": 0,
                "planejado": 0,
                "pendente": 0,
                "solucionado": 0,
                "fechado": 0,
            },
            "N2": {
                "novo": 0,
                "em_progresso": 0,
                "planejado": 0,
                "pendente": 0,
                "solucionado": 0,
                "fechado": 0,
            },
            "N3": {
                "novo": 0,
                "em_progresso": 0,
                "planejado": 0,
                "pendente": 0,
                "solucionado": 0,
                "fechado": 0,
            },
            "N4": {
                "novo": 0,
                "em_progresso": 0,
                "planejado": 0,
                "pendente": 0,
                "solucionado": 0,
                "fechado": 0,
            },
        }

        # Mapeamento de n√≠veis para IDs de grupos GLPI
        service_levels = {
            "N1": 89,  # CC-SE-SUBADM-DTIC > N1
            "N2": 90,  # CC-SE-SUBADM-DTIC > N2
            "N3": 91,  # CC-SE-SUBADM-DTIC > N3
            "N4": 92,  # CC-SE-SUBADM-DTIC > N4
        }

        # Para cada n√≠vel, buscar tickets do grupo correspondente
        for nivel, group_id in service_levels.items():
            print(
                f"{Fore.YELLOW}   Processando n√≠vel {nivel} (Grupo ID: {group_id})...{Style.RESET_ALL}"
            )

            # Buscar tickets do grupo
            url = f"{self.config.base_url}/apirest.php/search/Ticket"

            params = {
                "criteria[0][field]": 8,  # Campo do grupo atribu√≠do (Groups_id)
                "criteria[0][searchtype]": "equals",
                "criteria[0][value]": group_id,
                "forcedisplay[0]": 12,  # Status
                "forcedisplay[1]": 2,  # ID do ticket
                "range": "0-9999",  # Aumentar limite
            }

            try:
                response = self.session.get(url, params=params)
                response.raise_for_status()

                data = response.json()
                tickets = data.get("data", [])

                print(f"      Grupo {group_id}: {len(tickets)} tickets encontrados")

                # Contar por status
                for ticket in tickets:
                    status_id = int(ticket.get("12", 0))
                    status_name = status_map.get(status_id, "novo")

                    if status_name in status_por_nivel[nivel]:
                        status_por_nivel[nivel][status_name] += 1

            except requests.exceptions.RequestException as e:
                print(f"      Erro ao buscar tickets do grupo {group_id}: {e}")
                continue

        # Exibir resumo colorido
        print(f"{Fore.GREEN}‚úÖ Status por n√≠vel coletado:{Style.RESET_ALL}")
        for nivel, status_counts in status_por_nivel.items():
            color = self.level_colors.get(nivel, Fore.WHITE)
            total_nivel = sum(status_counts.values())
            print(f"{color}   {nivel} (Total: {total_nivel}): {Style.RESET_ALL}")

            for status, count in status_counts.items():
                if count > 0:
                    print(f"{color}      {status.title()}: {count}{Style.RESET_ALL}")

        return status_por_nivel

    def _get_all_active_technicians(self) -> List[Dict[str, Any]]:
        """
        Busca todos os t√©cnicos ativos seguindo a implementa√ß√£o real do backend

        M√âTODO CORRETO: Usar os IDs espec√≠ficos dos t√©cnicos v√°lidos da entidade CAU
        que est√£o ativos (is_active=1) e n√£o deletados (is_deleted=0)

        Returns:
            Lista de t√©cnicos com ID e nome
        """
        print("      Buscando t√©cnicos ativos usando IDs espec√≠ficos da entidade CAU...")

        # IDs dos t√©cnicos v√°lidos da entidade CAU (conforme fornecido pelo usu√°rio)
        technician_ids = [
            "696",
            "32",
            "141",
            "60",
            "69",
            "1032",
            "252",
            "721",
            "926",
            "1291",
            "185",
            "1331",
            "1404",
            "1088",
            "1263",
            "10",
            "53",
            "250",
            "1471",
        ]

        tecnicos_ativos = []

        for tech_id in technician_ids:
            try:
                # Buscar detalhes do usu√°rio e verificar se est√° ativo e n√£o deletado
                user_details = self._get_user_details(tech_id)
                if user_details:
                    tecnicos_ativos.append({"id": tech_id, "nome": user_details["nome"]})
            except Exception as e:
                print(f"      Erro ao processar t√©cnico {tech_id}: {e}")
                continue

        print(f"      {len(tecnicos_ativos)} t√©cnicos ativos v√°lidos encontrados")
        return tecnicos_ativos

    def _parse_technician_id(self, tech_field) -> Optional[str]:
        """
        Parse correto do campo users_id_tech que pode vir como string, lista ou n√∫mero
        Implementa√ß√£o baseada no backend real
        """
        if not tech_field:
            return None

        # Se for lista, pegar o primeiro item v√°lido
        if isinstance(tech_field, list):
            for item in tech_field:
                if item and str(item) != "0":
                    return str(item)
            return None

        # Se for string, verificar se √© JSON
        if isinstance(tech_field, str):
            # Tentar fazer parse como JSON
            try:
                import json

                parsed = json.loads(tech_field)
                if isinstance(parsed, list) and parsed:
                    for item in parsed:
                        if item and str(item) != "0":
                            return str(item)
                elif parsed and str(parsed) != "0":
                    return str(parsed)
            except Exception:
                # Se n√£o for JSON, tratar como string simples
                if tech_field and tech_field != "0":
                    return str(tech_field)
            return None

        # Se for n√∫mero
        if isinstance(tech_field, (int, float)):
            if tech_field and str(tech_field) != "0":
                return str(tech_field)

        return None

    def _get_user_id_by_name(self, user_name: str) -> Optional[str]:
        """
        Busca o ID do usu√°rio pelo nome

        Args:
            user_name: Nome do usu√°rio

        Returns:
            ID do usu√°rio ou None se n√£o encontrado
        """
        try:
            url = f"{self.config.base_url}/apirest.php/search/User"

            params = {
                "criteria[0][field]": 1,  # Campo nome
                "criteria[0][searchtype]": "equals",
                "criteria[0][value]": user_name,
                "forcedisplay[0]": 2,  # ID
                "forcedisplay[1]": 1,  # Nome
                "range": "0-10",
            }

            response = self.session.get(url, params=params)
            response.raise_for_status()

            data = response.json()
            users = data.get("data", [])

            if users and isinstance(users, list) and len(users) > 0:
                user = users[0]
                if isinstance(user, dict):
                    return user.get("2")  # ID do usu√°rio

            return None

        except requests.exceptions.RequestException as e:
            print(f"      Erro ao buscar ID do usu√°rio {user_name}: {e}")
            return None

    def _get_technician_level_from_groups(self, user_id: str) -> Optional[str]:
        """
        Determina o n√≠vel do t√©cnico baseado nos grupos GLPI (implementa√ß√£o real do backend)

        Args:
            user_id: ID do usu√°rio/t√©cnico

        Returns:
            N√≠vel (N1, N2, N3, N4) ou None se n√£o encontrado
        """
        # Mapeamento de n√≠veis para IDs de grupos GLPI
        service_levels = {
            "N1": 89,  # CC-SE-SUBADM-DTIC > N1
            "N2": 90,  # CC-SE-SUBADM-DTIC > N2
            "N3": 91,  # CC-SE-SUBADM-DTIC > N3
            "N4": 92,  # CC-SE-SUBADM-DTIC > N4
        }

        try:
            # Buscar grupos do usu√°rio
            url = f"{self.config.base_url}/apirest.php/search/Group_User"

            params = {
                "range": "0-99",
                "criteria[0][field]": "4",  # Campo users_id
                "criteria[0][searchtype]": "equals",
                "criteria[0][value]": str(user_id),
                "forcedisplay[0]": "3",  # groups_id
                "forcedisplay[1]": "4",  # users_id
            }

            response = self.session.get(url, params=params)
            response.raise_for_status()

            data = response.json()
            if data and isinstance(data, dict) and data.get("data"):
                for group_entry in data["data"]:
                    if isinstance(group_entry, dict) and "3" in group_entry:
                        try:
                            group_id = int(group_entry["3"])

                            # Verificar se o grupo corresponde aos service_levels
                            for level, level_group_id in service_levels.items():
                                if group_id == level_group_id:
                                    return level
                        except (ValueError, TypeError):
                            continue

            # Se n√£o encontrou nos grupos 89-92, usar fallback por nome
            return self._get_technician_level_by_name_fallback(user_id)

        except requests.exceptions.RequestException as e:
            print(f"      Erro ao buscar grupos do usu√°rio {user_id}: {e}")
            return self._get_technician_level_by_name_fallback(user_id)

    def _get_technician_level_by_name_fallback(self, user_id: str) -> str:
        """
        Determina o n√≠vel do t√©cnico baseado no nome (fallback do backend)
        Mapeamento hardcoded dos t√©cnicos por n√≠vel conforme backend real
        """
        try:
            # Buscar nome do usu√°rio
            user_url = f"{self.config.base_url}/apirest.php/User/{user_id}"
            response = self.session.get(user_url)
            if response.status_code != 200:
                return "N1"  # N√≠vel padr√£o

            user_data = response.json()
            firstname = user_data.get("firstname", "").lower()
            realname = user_data.get("realname", "").lower()

            # Mapeamento correto dos t√©cnicos por n√≠vel (conforme backend real)
            n1_names = [
                "gabriel andrade da conceicao",
                "nicolas fernando muniz nunez",
            ]

            n2_names = [
                "alessandro carbonera vieira",
                "jonathan nascimento moletta",
                "thales vinicius paz leite",
                "leonardo trojan repiso riela",
                "edson joel dos santos silva",
                "luciano marcelino da silva",
            ]

            n3_names = [
                "anderson da silva morim de oliveira",
                "silvio godinho valim",
                "jorge antonio vicente j√∫nior",
                "pablo hebling guimaraes",
                "miguelangelo ferreira",
            ]

            n4_names = [
                "gabriel silva machado",
                "luciano de araujo silva",
                "wagner mengue",
                "paulo c√©sar ped√≥ nunes",
                "alexandre rovinski almoarqueg",
            ]

            # Verificar em qual n√≠vel o t√©cnico est√°
            full_name = f"{firstname} {realname}".strip()

            if full_name in n4_names:
                return "N4"
            elif full_name in n3_names:
                return "N3"
            elif full_name in n2_names:
                return "N2"
            elif full_name in n1_names:
                return "N1"
            else:
                # Se n√£o encontrou, usar N1 como padr√£o
                return "N1"

        except Exception as e:
            print(f"      Erro ao determinar n√≠vel por nome para usu√°rio {user_id}: {e}")
            return "N1"  # N√≠vel padr√£o em caso de erro

    def _get_technician_metrics_corrected(self, tecnico_id: str) -> Dict[str, Any]:
        """
        Coleta m√©tricas de performance de um t√©cnico espec√≠fico (implementa√ß√£o corrigida)

        Args:
            tecnico_id: ID do t√©cnico no GLPI

        Returns:
            Dict com m√©tricas: total, resolvidos, pendentes, taxa_resolucao
        """
        url = f"{self.config.base_url}/apirest.php/search/Ticket"

        # Buscar todos os tickets atribu√≠dos ao t√©cnico
        params = {
            "criteria[0][field]": 5,  # Campo t√©cnico atribu√≠do
            "criteria[0][searchtype]": "equals",
            "criteria[0][value]": tecnico_id,
            "forcedisplay[0]": 2,  # ID
            "forcedisplay[1]": 12,  # Status
            "range": "0-1000",
        }

        try:
            response = self.session.get(url, params=params)
            response.raise_for_status()

            data = response.json()
            tickets = data.get("data", [])

            total = len(tickets)
            resolvidos = 0
            pendentes = 0

            for ticket in tickets:
                status_id = int(ticket.get("12", 0))

                if status_id in [5, 6]:  # Solucionado ou Fechado
                    resolvidos += 1
                elif status_id in [2, 3, 4]:  # Em progresso, Planejado, Pendente
                    pendentes += 1

            taxa_resolucao = (resolvidos / total * 100) if total > 0 else 0

            return {
                "total": total,
                "resolvidos": resolvidos,
                "pendentes": pendentes,
                "taxa_resolucao": round(taxa_resolucao, 1),
            }

        except requests.exceptions.RequestException as e:
            print(f"        Erro ao buscar m√©tricas do t√©cnico {tecnico_id}: {e}")
            return {"total": 0, "resolvidos": 0, "pendentes": 0, "taxa_resolucao": 0.0}

    def _get_user_details(self, user_id: str) -> Optional[Dict[str, Any]]:
        """
        Busca detalhes de um usu√°rio espec√≠fico com filtros de ativo e n√£o deletado

        Args:
            user_id: ID do usu√°rio

        Returns:
            Dados do usu√°rio ou None se n√£o encontrado/inv√°lido
        """
        url = f"{self.config.base_url}/apirest.php/User/{user_id}"

        try:
            response = self.session.get(url)
            response.raise_for_status()

            user_data = response.json()

            # Aplicar filtros conforme glpi_service.py
            is_active = str(user_data.get("is_active", "0")).strip()
            is_deleted = str(user_data.get("is_deleted", "0")).strip()

            # Verificar se o usu√°rio est√° ativo e n√£o deletado
            if str(is_active) != "1":
                print(f"      Usu√°rio {user_id} inativo (is_active={is_active})")
                return None

            if str(is_deleted) == "1":
                print(f"      Usu√°rio {user_id} deletado (is_deleted={is_deleted})")
                return None

            # N√£o verificar perfil t√©cnico pois j√° estamos buscando apenas t√©cnicos ativos

            # Construir nome completo conforme glpi_service.py
            firstname = str(user_data.get("firstname", "")).strip()
            realname = str(user_data.get("realname", "")).strip()
            username = str(user_data.get("name", "")).strip()

            full_name = f"{firstname} {realname}".strip()
            if not full_name:
                full_name = username
            if not full_name:
                full_name = f"Usu√°rio {user_id}"

            return {
                "id": user_id,
                "nome": full_name,
                "login": username,
                "ativo": int(is_active),
                "is_active": is_active,
                "is_deleted": is_deleted,
            }

        except requests.exceptions.RequestException as e:
            print(f"      Erro ao buscar usu√°rio {user_id}: {e}")
            return None

    def logout(self) -> bool:
        """
        Finaliza a sess√£o no GLPI (killSession)

        Endpoint: GET /apirest.php/killSession

        √â importante sempre finalizar a sess√£o para:
        1. Liberar recursos no servidor GLPI
        2. Invalidar o session token
        3. Manter boas pr√°ticas de seguran√ßa

        Returns:
            bool: True se logout foi bem-sucedido
        """
        if not self.session_token:
            print(f"{Fore.YELLOW}‚ö†Ô∏è  Nenhuma sess√£o ativa para finalizar{Style.RESET_ALL}")
            return True

        print(f"{Fore.CYAN}üîì Finalizando sess√£o no GLPI...{Style.RESET_ALL}")

        url = f"{self.config.base_url}/apirest.php/killSession"

        try:
            response = self.session.get(url)
            response.raise_for_status()

            # Limpar session token
            self.session_token = None
            if "Session-Token" in self.session.headers:
                del self.session.headers["Session-Token"]

            print(f"{Fore.GREEN}‚úÖ Sess√£o finalizada com sucesso!{Style.RESET_ALL}")
            return True

        except requests.exceptions.RequestException as e:
            print(f"{Fore.RED}‚ùå Erro ao finalizar sess√£o: {e}{Style.RESET_ALL}")
            return False

    def collect_all_metrics(self) -> Dict[str, Any]:
        """
        Executa coleta completa de todas as m√©tricas

        Ordem de execu√ß√£o:
        1. Autentica√ß√£o
        2. M√©tricas gerais
        3. Tickets novos
        4. Ranking de t√©cnicos
        5. Status por n√≠vel
        6. Finaliza√ß√£o da sess√£o

        Returns:
            Dict consolidado com todas as m√©tricas
        """
        print(f"{Fore.MAGENTA}{'='*60}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}üöÄ INICIANDO COLETA COMPLETA DE M√âTRICAS GLPI{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}{'='*60}{Style.RESET_ALL}")

        start_time = datetime.now()

        # Estrutura de resultado
        result = {
            "timestamp": start_time.isoformat(),
            "success": False,
            "metrics": {},
            "errors": [],
        }

        try:
            # 1. Autentica√ß√£o
            if not self.login():
                result["errors"].append("Falha na autentica√ß√£o")
                return result

            # 2. M√©tricas gerais
            print(f"\n{Fore.MAGENTA}üìä FASE 1: M√©tricas Gerais{Style.RESET_ALL}")
            result["metrics"]["status_geral"] = self.get_status_geral()

            # 3. Tickets novos
            print(f"\n{Fore.MAGENTA}üé´ FASE 2: Tickets Novos{Style.RESET_ALL}")
            result["metrics"]["tickets_novos"] = self.get_tickets_novos()

            # 4. Ranking de t√©cnicos
            print(f"\n{Fore.MAGENTA}üèÜ FASE 3: Ranking de T√©cnicos{Style.RESET_ALL}")
            result["metrics"]["ranking_tecnicos"] = self.get_ranking_tecnicos()

            # 5. Status por n√≠vel
            print(f"\n{Fore.MAGENTA}üìà FASE 4: Status por N√≠vel{Style.RESET_ALL}")
            result["metrics"]["status_por_nivel"] = self.get_status_por_nivel()

            result["success"] = True

        except Exception as e:
            error_msg = f"Erro durante coleta: {str(e)}"
            result["errors"].append(error_msg)
            print(f"{Fore.RED}‚ùå {error_msg}{Style.RESET_ALL}")

        finally:
            # 6. Finalizar sess√£o sempre
            print(f"\n{Fore.MAGENTA}üîì FASE 5: Finaliza√ß√£o{Style.RESET_ALL}")
            self.logout()

        # Calcular tempo total
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        result["duration_seconds"] = duration

        # Resumo final
        print(f"\n{Fore.MAGENTA}{'='*60}{Style.RESET_ALL}")
        if result["success"]:
            print(f"{Fore.GREEN}‚úÖ COLETA CONCLU√çDA COM SUCESSO!{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}‚ùå COLETA FINALIZADA COM ERROS{Style.RESET_ALL}")

        print(f"{Fore.CYAN}‚è±Ô∏è  Tempo total: {duration:.2f} segundos{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}{'='*60}{Style.RESET_ALL}")

        return result


def save_metrics_to_file(metrics: Dict[str, Any], filename: Optional[str] = None) -> str:
    """
    Salva as m√©tricas coletadas em arquivo JSON

    Args:
        metrics: Dados das m√©tricas
        filename: Nome do arquivo (opcional)

    Returns:
        Caminho do arquivo salvo
    """
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"glpi_metrics_{timestamp}.json"

    with open(filename, "w", encoding="utf-8") as f:
        json.dump(metrics, f, indent=2, ensure_ascii=False)

    print(f"{Fore.GREEN}üíæ M√©tricas salvas em: {filename}{Style.RESET_ALL}")
    return filename


def main():
    """
    Fun√ß√£o principal - ponto de entrada do script

    Execu√ß√£o:
    1. Carrega configura√ß√£o
    2. Inicializa coletor
    3. Executa coleta completa
    4. Salva resultados
    """
    print(f"{Fore.CYAN}GLPI Metrics Collector v1.0{Style.RESET_ALL}")
    print(f"{Fore.CYAN}Documentacao viva para coleta de metricas GLPI{Style.RESET_ALL}\n")

    # Carregar configura√ß√£o
    try:
        config = GLPIConfig.from_env()

        # Validar configura√ß√£o m√≠nima
        if not config.base_url:
            print(f"{Fore.RED}‚ùå GLPI_BASE_URL n√£o configurado{Style.RESET_ALL}")
            return

        if not config.app_token:
            print(f"{Fore.RED}‚ùå GLPI_APP_TOKEN n√£o configurado{Style.RESET_ALL}")
            return

        if not config.user_token and not (config.username and config.password):
            error_msg = "‚ùå Credenciais n√£o configuradas " "(USER_TOKEN ou USERNAME/PASSWORD)"
            print(f"{Fore.RED}{error_msg}{Style.RESET_ALL}")
            return

    except Exception as e:
        print(f"{Fore.RED}‚ùå Erro ao carregar configura√ß√£o: {e}{Style.RESET_ALL}")
        return

    # Inicializar coletor
    collector = GLPIMetricsCollector(config)

    # Executar coleta completa
    metrics = collector.collect_all_metrics()

    # Salvar resultados
    if metrics["success"]:
        filename = save_metrics_to_file(metrics)
        success_msg = "üéâ Processo conclu√≠do! " f"Verifique o arquivo: {filename}"
        print(f"\n{Fore.GREEN}{success_msg}{Style.RESET_ALL}")
    else:
        error_msg = "‚ö†Ô∏è  Processo finalizado com erros. " "Verifique os logs acima."
        print(f"\n{Fore.RED}{error_msg}{Style.RESET_ALL}")
        if metrics["errors"]:
            print(f"{Fore.RED}Erros encontrados: {Style.RESET_ALL}")
            for error in metrics["errors"]:
                print(f"{Fore.RED} - {error}{Style.RESET_ALL}")


if __name__ == "__main__":
    """
    Execu√ß√£o direta do script

    Configura√ß√£o via vari√°veis de ambiente:

    export GLPI_BASE_URL="http://seu-glpi.com/glpi"
    export GLPI_APP_TOKEN="seu_app_token"
    export GLPI_USER_TOKEN="seu_user_token"
    # OU
    export GLPI_USERNAME="seu_usuario"
    export GLPI_PASSWORD="sua_senha"

    python glpi_metrics_collector.py
    """

    # Instalar depend√™ncias se necess√°rio
    try:
        pass  # requests j√° importado no topo
    except ImportError as e:
        print(f"‚ùå Depend√™ncia n√£o encontrada: {e}")
        print("üí° Instale as depend√™ncias com:")
        print("   pip install requests colorama")
        exit(1)

    main()
