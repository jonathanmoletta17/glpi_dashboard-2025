
O Diretório .trae: Um Guia Definitivo para Configuração e Controle Avançado do Trae AI


O Diretório .trae: O Centro de Controle do Seu Projeto de IA

A ascensão dos Ambientes de Desenvolvimento Integrado (IDEs) alimentados por Inteligência Artificial, como o Trae AI, marca uma mudança fundamental no fluxo de trabalho de desenvolvimento de software. O Trae, um fork adaptativo do Visual Studio Code, foi projetado para facilitar uma colaboração profunda entre o desenvolvedor e agentes de IA.1 No cerne dessa colaboração está o diretório oculto
.trae, um componente que eleva a configuração da IA de um menu de configurações globais para um sistema de controle granular e específico do projeto. Este diretório serve como o sistema nervoso central para ditar o comportamento do Trae AI, permitindo que as equipes personalizem, versionem e compartilhem as diretrizes da IA juntamente com o seu código-fonte.
A presença do diretório .trae na raiz de um projeto sinaliza uma abordagem deliberada de "Configuração de IA como Código" (AI Configuration-as-Code). Em vez de depender de configurações de interface de usuário opacas e específicas do usuário, o Trae adota um paradigma onde o contexto da IA, as regras comportamentais e as integrações de ferramentas são definidas em arquivos de texto simples. Essa metodologia tem implicações profundas na colaboração em equipe, na reprodutibilidade e na governança. Quando um novo desenvolvedor clona um repositório, ele não herda apenas o código, mas também a configuração completa da IA, garantindo que o assistente de IA se comporte de forma consistente para todos os membros da equipe. As alterações no comportamento da IA podem ser propostas, revisadas e auditadas por meio de pull requests, tratando a configuração da IA como um ativo de engenharia de primeira classe.

Anatomia do Diretório .trae

O diretório .trae encapsula três domínios principais de configuração da IA: gerenciamento de contexto, definição de comportamento e extensão de capacidades. Cada função é gerenciada por arquivos ou subdiretórios específicos, criando uma separação clara de responsabilidades.
.trae/.ignore: Este arquivo é o principal mecanismo para refinar a consciência contextual da IA. Ele instrui o Trae a excluir arquivos e pastas específicas do processo de indexação, que é fundamental para perguntas e respostas sobre a base de código.2
.trae/rules/: Este subdiretório abriga uma coleção de arquivos Markdown que funcionam como o livro de regras do projeto para a IA. Esses arquivos definem restrições comportamentais, padrões de codificação e diretrizes arquitetônicas que a IA deve seguir.2
.trae/mcp.json: Este arquivo de configuração JSON é o portal para estender as capacidades da IA além do ambiente local. Ele define integrações com servidores do Protocolo de Contexto de Modelo (MCP), permitindo que os agentes de IA interajam com bancos de dados, APIs e outros serviços externos.6
A tabela a seguir fornece uma referência rápida à estrutura e função de cada componente dentro do diretório .trae.
Arquivo / Diretório
Função Primária
Descrição
Formato da Configuração
/.ignore
Gerenciamento de Contexto
Exclui arquivos e pastas da indexação da IA para refinar o contexto, melhorar o desempenho e garantir a privacidade.
Sintaxe de texto/Gitignore
/rules/
Definição de Comportamento da IA
Contém arquivos Markdown que estabelecem regras e diretrizes para o comportamento da IA, padrões de codificação e arquitetura do projeto.
Markdown (.md)
/mcp.json
Integração de Ferramentas e Serviços
Configura conexões com servidores do Protocolo de Contexto de Modelo (MCP) para estender as capacidades do agente de IA a ferramentas e dados externos.
JSON


Dominando a Consciência Contextual com .trae/.ignore

A precisão e a eficácia de qualquer assistente de IA são diretamente proporcionais à qualidade do contexto que ele recebe. A capacidade do Trae de compreender profundamente o contexto de desenvolvimento — abrangendo repositórios de código, resultados de pesquisa online e documentos compartilhados — é a base de seu poder.1 No entanto, um contexto irrestrito é uma faca de dois gumes. Fornecer à IA informações irrelevantes ou excessivas, como o diretório
node_modules, artefatos de compilação ou grandes arquivos de dados, pode degradar o desempenho, aumentar a latência, inflar os custos de tokens e, o mais importante, levar a respostas imprecisas ou "alucinações". O arquivo .trae/.ignore é a ferramenta cirúrgica projetada para esculpir esse contexto, garantindo que a IA opere com um conjunto de informações enxuto, relevante e seguro.

Análise Detalhada do Arquivo .trae/.ignore

O arquivo .trae/.ignore funciona como uma lista de exclusão para o processo de indexação do Trae. Qualquer arquivo ou diretório listado neste arquivo será ignorado quando o Trae construir seu índice do espaço de trabalho, que é essencial para recursos como perguntas e respostas sobre a base de código.2
Uma distinção crucial é sua relação com o arquivo .gitignore do projeto. O sistema de exclusão do Trae considera ambos os arquivos; qualquer padrão em .gitignore ou .trae/.ignore resultará na exclusão do contexto da IA.2 Essa arquitetura de duas camadas permite um controle refinado:
.gitignore: Deve ser usado para arquivos que nunca devem ser rastreados pelo controle de versão (por exemplo, segredos, dependências locais, arquivos de sistema operacional).
.trae/.ignore: Deve ser usado para arquivos que estão no controle de versão, mas são irrelevantes para o assistente de IA (por exemplo, grandes ativos de teste, documentação gerada, arquivos de dados de amostra).
O arquivo utiliza a sintaxe padrão do gitignore, que é familiar para a maioria dos desenvolvedores. Padrões comuns incluem:
Ignorar diretórios inteiros: node_modules/, dist/, build/, vendor/
Ignorar tipos de arquivo específicos: *.log, *.tmp, *.lock
Ignorar arquivos específicos: config/database.yml
Padrões de exceção usando !: !/dist/critical-bundle.js
A configuração estratégica deste arquivo vai além de simplesmente melhorar a precisão da IA; é uma ferramenta fundamental para otimização de desempenho e governança de privacidade. A política de privacidade do Trae indica que, para a indexação, os arquivos podem ser temporariamente enviados para a geração de embeddings, após o qual o texto simples é excluído.1 A função "ignore" é explicitamente mencionada como um meio de limitar como os dados do usuário são utilizados.1 O processo de criar embeddings para uma base de código inteira, especialmente uma grande, é computacionalmente intensivo e envolve a transferência de dados. Ao usar o
.trae/.ignore para excluir diretórios massivos e irrelevantes como node_modules ou pastas contendo dados potencialmente sensíveis, os desenvolvedores podem mitigar diretamente vários riscos. Isso resulta em uma indexação mais rápida, respostas de IA mais ágeis devido a um espaço vetorial de contexto menor e mais focado e, crucialmente, uma postura de segurança aprimorada ao minimizar a superfície de código exposta a serviços externos. Portanto, o arquivo .trae/.ignore deve ser visto não apenas como um filtro de contexto, mas como um controle estratégico para otimização de desempenho e mitigação de riscos.

Arquitetando o Comportamento da IA com o Sistema de Regras do Trae

Um dos desafios mais significativos no trabalho com LLMs é a necessidade de repetir instruções e o "desvio de prompt", onde o modelo gradualmente se afasta das diretrizes iniciais ao longo de uma longa conversa. O sistema de regras do Trae aborda diretamente esse problema, fornecendo um framework declarativo para restringir e guiar o comportamento da IA.7 Descrito como um "sistema de restrição de comportamento", ele permite que desenvolvedores e equipes codifiquem padrões de codificação, decisões arquitetônicas e preferências de estilo em arquivos Markdown persistentes, garantindo que a IA opere consistentemente dentro de limites predefinidos.6
O poder desse sistema reside em sua estrutura hierárquica. As regras são aplicadas em camadas, com diretrizes mais específicas prevalecendo sobre as mais gerais. Essa cascata de precedência — Regras de Agente > Regras de Projeto > Regras de Usuário — permite um equilíbrio entre preferências pessoais, padrões de equipe e requisitos de tarefas especializadas.9

Diretivas Globais: user_rules.md

Na base da hierarquia estão as regras do usuário, definidas no arquivo user_rules.md. Este arquivo captura as preferências pessoais e globais de um desenvolvedor, que são aplicadas a todos os projetos em que ele trabalha.5 Não está localizado dentro do diretório
.trae de um projeto, mas sim em um diretório de configuração global do usuário, acessível e criado através do painel de configurações do IDE.5
Casos de uso comuns para user_rules.md incluem:
Estilo de Linguagem: Definir o tom e o estilo de comunicação preferidos da IA. Por exemplo: "Responda sempre em um tom formal e profissional" ou "Use uma linguagem concisa e evite explicações prolixas".5
Personalidade da IA: Instruir a IA a adotar uma persona específica. Por exemplo: "Aja como um arquiteto de software sênior, focando em escalabilidade e manutenibilidade" ou "Seja um colega de programação prestativo e encorajador".7
Preferências de Sistema Operacional: Garantir que as saídas sejam adaptadas ao ambiente do desenvolvedor. Por exemplo: "Forneça todos os comandos de shell para serem compatíveis com o Zsh no macOS".5

Guardrails Específicos do Projeto: O Diretório .trae/rules/

A camada intermediária da hierarquia é o diretório .trae/rules/, que contém regras que se aplicam apenas ao projeto atual. Este é o domínio dos padrões de equipe, convenções de codificação e diretrizes arquitetônicas. Quando um desenvolvedor cria uma regra de projeto pela primeira vez através da interface do IDE, o Trae cria automaticamente o diretório .trae/rules/ e um arquivo inicial project_rules.md.5
A pesquisa sugere uma estrutura de arquivos mais granular e semântica dentro deste diretório, permitindo uma organização clara das diretrizes do projeto 2:
project_rules.md: Um arquivo geral para regras que se aplicam a todo o projeto, como políticas de commit ou diretrizes gerais de teste.5
architecture.md: Define a estrutura de alto nível do projeto, as responsabilidades dos componentes, os padrões de design (por exemplo, arquitetura de microsserviços, modelo-vista-controlador) e o fluxo de dados.
development.md: Especifica os padrões de codificação. Isso pode incluir convenções de nomenclatura (por exemplo, "Variáveis devem usar camelCase, componentes devem usar PascalCase"), regras de formatação, bibliotecas e frameworks preferidos (por exemplo, "Use Zustand para gerenciamento de estado em vez de Redux") e práticas recomendadas específicas da linguagem.2
orchestration.md: Orienta a implementação de novas funcionalidades. Pode especificar que todos os novos endpoints de API devem ser acompanhados por testes de unidade e integração, ou que a documentação voltada para o usuário deve ser atualizada como parte de qualquer alteração na interface.
design_philosophy.md: Para projetos web, este arquivo pode delinear os princípios de design, o uso de uma biblioteca de componentes específica (por exemplo, Material-UI, Tailwind CSS) e metodologias de CSS (por exemplo, BEM, CSS-in-JS).

Prompts Específicos de Agente e Regras em Linha

No topo da hierarquia estão as regras de agente. Esta é a camada de controle mais específica, definida dentro da seção "Prompt" ao criar ou editar um agente personalizado na interface do Trae.10 Essas regras se aplicam apenas ao agente específico para o qual são escritas e prevalecem sobre as regras de projeto e de usuário.9
Essa camada permite a criação de agentes altamente especializados. Por exemplo, um prompt de agente pode instruí-lo a priorizar ou aderir estritamente às diretrizes encontradas nos arquivos .trae/rules/, criando uma sinergia poderosa entre as camadas.11
Casos de uso para regras de agente incluem:
Criação de um "Agente de Banco de Dados": O prompt pode instruí-lo a sempre usar um MCP de PostgreSQL específico, formatar todas as consultas SQL de acordo com os padrões do projeto e nunca executar consultas DELETE sem confirmação.
Criação de um "Agente de Refatoração": O prompt pode direcioná-lo a focar exclusivamente na melhoria da legibilidade do código e na adesão aos padrões definidos em architecture.md, ignorando a adição de novas funcionalidades.
Definição da Prioridade de Uso de Ferramentas: Instruir um agente a "priorizar o uso da documentação oficial através da ferramenta de busca na web em vez de seus dados de treinamento" para garantir que as informações mais recentes sejam usadas.11
A tabela a seguir resume a hierarquia do sistema de regras do Trae, fornecendo um guia claro para quando usar cada tipo de regra.
Tipo de Regra
Escopo
Localização do Arquivo
Propósito
Exemplo de Caso de Uso
Usuário
Global (Todos os Projetos)
Diretório de Configuração do Usuário
Preferências pessoais e estilo
"Responda em inglês formal."
Projeto
Por Projeto
.trae/rules/
Padrões de equipe e arquitetura do projeto
"Todos os componentes React devem usar sintaxe funcional."
Agente
Por Agente
UI de Prompt do Agente
Execução de tarefas especializadas e uso de ferramentas
"Ao interagir com o banco de dados, use exclusivamente o MCP do PostgreSQL."


Estendendo Capacidades Através do Protocolo de Contexto de Modelo (MCP)

Enquanto o sistema de regras define os limites do comportamento da IA, o Protocolo de Contexto de Modelo (MCP) define suas capacidades. O MCP é um protocolo aberto e padronizado projetado para conectar LLMs a ferramentas e fontes de dados externas, funcionando efetivamente como uma "USB-C para IA".12 Dentro do Trae, o MCP é a tecnologia que transforma os agentes de IA de assistentes de código com conhecimento do repositório em verdadeiros "engenheiros de IA" capazes de interagir com o mundo exterior. Ele permite que um agente leia dados de um banco de dados, consulte uma API de terceiros, execute testes em um navegador ou gerencie problemas no GitHub, tudo a partir do IDE.1

Configurando Servidores MCP no Trae IDE

A integração dessas ferramentas externas é gerenciada por meio de arquivos de configuração JSON. Embora existam configurações MCP globais, a abordagem de "Configuração de IA como Código" é mantida por meio de um arquivo de configuração específico do projeto, localizado em .trae/mcp.json.6 Este arquivo define os servidores MCP que estão disponíveis para os agentes no projeto atual.
A sintaxe da configuração requer a especificação de um nome para o servidor, o comando para executá-lo, quaisquer argumentos necessários e variáveis de ambiente, como chaves de API.6
Exemplo de Configuração mcp.json para um Servidor Supabase:

JSON


{
  "mcpServers": {
    "supabase": {
      "command": "npx",
      "args":,
      "env": {
        "SUPABASE_ACCESS_TOKEN": "<SEU_TOKEN_DE_ACESSO_PESSOAL>"
      }
    }
  }
}


Neste exemplo, o Trae é instruído a iniciar o servidor MCP do Supabase usando npx. O token de acesso e a referência do projeto são passados como variáveis de ambiente e argumentos, respectivamente.
Uma vez configurado, um servidor MCP pode ser utilizado de duas maneiras principais:
Agente "Builder with MCP": Este agente integrado detecta e utiliza automaticamente todos os servidores MCP configurados no projeto.12
Agentes Personalizados: Ao criar um agente personalizado, um desenvolvedor pode selecionar quais dos servidores MCP configurados o agente terá permissão para usar, aplicando o princípio de menor privilégio.12

Considerações de Segurança e Privacidade

A integração do MCP introduz um novo vetor de considerações de segurança e privacidade. Ao conceder a um agente de IA acesso a serviços externos, um desenvolvedor está efetivamente estendendo os limites de confiança do seu ambiente de desenvolvimento. A documentação do Trae afirma explicitamente que os servidores MCP são mantidos por terceiros e que o Trae não é responsável por seu comportamento.12 Isso transfere a responsabilidade da devida diligência para o desenvolvedor.
As discussões da comunidade destacam preocupações válidas sobre privacidade de dados, especialmente dada a associação do Trae com a ByteDance.20 A utilização do MCP pode ampliar esses riscos se não for gerenciada com cuidado.
Estratégias de Mitigação:
Princípio de Menor Privilégio: Use tokens de acesso somente leitura sempre que possível. Se um agente só precisa ler dados do banco de dados, não lhe dê permissões de escrita.
Isolamento de Ambiente: Conecte os servidores MCP a ambientes de desenvolvimento ou de teste, nunca diretamente a sistemas de produção, a menos que seja absolutamente necessário e com medidas de segurança robustas.18
Verificação de Servidores da Comunidade: Antes de usar um servidor MCP construído pela comunidade, inspecione seu código-fonte para entender como ele lida com dados e autenticação.
Uso do Modo de Privacidade: O Trae oferece um "Modo de Privacidade" que impede o armazenamento ou uso de conversas de bate-papo para análise ou treinamento de modelos.23 Embora isso se aplique às interações de bate-papo, os desenvolvedores devem assumir que os dados que fluem através de servidores MCP de terceiros não são cobertos por esta política.
A adoção do MCP dentro do Trae representa uma troca estratégica fundamental. Ele desbloqueia um potencial quase ilimitado para automação e capacidades de agentes, mas, ao mesmo tempo, introduz uma nova classe de vulnerabilidades potenciais na interseção do LLM, do IDE e de serviços externos. O desenvolvedor deve agora atuar como um arquiteto de segurança para seu agente de IA, avaliando os riscos de cada integração. O arquivo .trae/mcp.json torna-se tão crítico para a segurança quanto um script de implantação de CI/CD ou um arquivo de configuração de firewall.

Implementações Avançadas e Integração de Fluxo de Trabalho

A verdadeira força do sistema de configuração do .trae é revelada quando seus componentes são usados em conjunto para criar fluxos de trabalho de IA coesos e altamente especializados. Ao combinar regras de comportamento, gerenciamento de contexto e capacidades estendidas de MCP, os desenvolvedores podem construir agentes personalizados que executam tarefas complexas com precisão e consistência.

Sinergia em Ação: Construindo um Agente Auditor de Acessibilidade para Next.js

Para ilustrar essa sinergia, considere o cenário de criação de um agente "Auditor de Acessibilidade para Next.js" para um projeto específico.
Passo 1: Definir o Comportamento em .trae/rules/
No arquivo development.md, codifique o padrão de acessibilidade necessário: ## Accessibility Standard\nAll components must adhere to WCAG 2.1 Level AA guidelines.
No arquivo architecture.md, descreva a estrutura dos componentes: ## Component Structure\nOur application uses atomic design principles. All interactive elements are built from base components located in src/components/atoms/.
Passo 2: Estender as Capacidades com .trae/mcp.json
Configure o servidor MCP do Playwright para permitir que o agente realize testes de navegador em tempo real.24
JSON
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["-y", "@playwright/mcp@latest"]
    }
  }
}


Passo 3: Criar o Agente Personalizado
Na interface do Trae, crie um novo agente chamado "Accessibility Auditor".
Atribua o servidor MCP "playwright" a este agente.
Escreva um prompt detalhado que una todas as peças:
PersonaYou are an expert Accessibility Auditor specializing in Next.js applications. Your goal is to identify and suggest fixes for WCAG 2.1 AA violations.Workflow
Understand Standards: First, read the accessibility standards defined in .trae/rules/development.md.
Analyze Architecture: Review the component structure described in .trae/rules/architecture.md.
Live Audit: Use the Playwright MCP tool to launch the application. Navigate through the primary user flows and audit the live DOM for compliance with the standards from step 1.
Report and Fix: For each violation found, report the issue and provide a specific code fix that adheres to our project's coding standards.
Este exemplo demonstra como o diretório .trae permite a orquestração de um fluxo de trabalho de IA multifacetado, onde o comportamento, o contexto e as ferramentas são precisamente definidos e integrados.

Esclarecendo os Dois "Traes": Configuração do IDE vs. CLI trae-agent

É crucial para os desenvolvedores entenderem a distinção entre o Trae IDE e a ferramenta de linha de comando (CLI) de código aberto trae-agent.25 Embora relacionados, seus sistemas de configuração são distintos e não intercambiáveis.
Trae IDE (Diretório .trae): Um IDE de código fechado, fork do VS Code, com uma interface gráfica.2 Sua configuração é gerenciada no nível do projeto através do diretório
.trae, focando na interação com agentes orientada pela interface do usuário.
trae-agent CLI: Uma ferramenta de código aberto baseada em terminal.25 Sua configuração é gerenciada através de um arquivo
trae_config.yaml, que define modelos de LLM, chaves de API e ferramentas disponíveis no terminal.25
O trae-agent é descrito como o "núcleo CLI que alimenta o Trae AI Editor", sugerindo que o IDE é um invólucro amigável em torno da lógica central do agente.26 No entanto, um desenvolvedor não pode aplicar a documentação de configuração do
trae_config.yaml ao diretório .trae do IDE, ou vice-versa.

Colaboração em Equipe: Versionando Configurações de IA

Como todo o diretório .trae reside dentro do repositório do projeto, ele se torna um artefato versionável, promovendo um novo nível de colaboração no desenvolvimento assistido por IA.
Integração (Onboarding): Novos desenvolvedores que clonam o repositório recebem automaticamente a configuração de IA correta, eliminando a necessidade de configuração manual e garantindo consistência desde o primeiro dia.
Revisões de Código: Mudanças no comportamento da IA — como atualizar os padrões de codificação em development.md ou adicionar uma nova integração de API em mcp.json — podem ser propostas, debatidas e aprovadas em pull requests, assim como o código-fonte.
Gerenciamento de Segredos: Para configurações que exigem informações sensíveis, como chaves de API no mcp.json, a prática recomendada é usar variáveis de ambiente. O arquivo mcp.json pode referenciar essas variáveis, que são carregadas a partir de um arquivo .env local que é, por sua vez, listado no .gitignore para evitar o commit de segredos.

Conclusão: Melhores Práticas e Perspectivas Futuras

O diretório .trae representa uma implementação sofisticada e poderosa do paradigma "Configuração de IA como Código". Ele move o controle sobre o comportamento do assistente de IA das mãos de configurações globais e opacas para um sistema transparente, versionável e específico do projeto. Ao dominar os três pilares deste sistema — gerenciamento de contexto com .ignore, definição de comportamento com /rules, e extensão de capacidades com mcp.json — os desenvolvedores podem transformar o Trae AI de uma ferramenta útil em um parceiro de engenharia altamente personalizado e eficiente.

Lista de Verificação de Melhores Práticas

Comece com o Contexto: Ao iniciar um novo projeto no Trae, a primeira etapa deve ser configurar o arquivo .trae/.ignore para excluir ruídos (por exemplo, node_modules, dist/) e dados sensíveis.
Codifique os Padrões da Equipe: Use o diretório .trae/rules/ para codificar os padrões de codificação, diretrizes arquitetônicas e melhores práticas da sua equipe. Isso garante que o código gerado pela IA seja consistente e de alta qualidade.
Separe as Preocupações com as Regras: Use user_rules.md para preferências pessoais (por exemplo, tom de resposta) e project_rules.md para mandatos de projeto (por exemplo, frameworks a serem usados).
Segurança em Primeiro Lugar com o MCP: Ao usar o MCP, priorize permissões de somente leitura e conecte-se a ambientes de não produção sempre que possível. Nunca faça commit de segredos ou chaves de API; use variáveis de ambiente referenciadas no seu mcp.json.
Construa Agentes Especializados: Combine regras de projeto e ferramentas MCP para construir agentes personalizados que automatizam tarefas complexas e repetitivas, como auditorias de segurança, refatoração de código ou geração de documentação.

Perspectivas Futuras

O sistema de configuração baseado em arquivos do Trae é imensamente poderoso, mas sua natureza baseada em texto pode apresentar uma curva de aprendizado. Uma análise da versão 1.3.0 do Trae IDE observou a falta de suporte de uma interface gráfica para a configuração, o que pode ser um desafio para a descoberta de funcionalidades.6 É provável que versões futuras do Trae introduzam interfaces mais amigáveis para gerenciar esses arquivos de configuração, tornando o poder do sistema mais acessível.
Além disso, o crescimento contínuo do ecossistema MCP terá um impacto direto na utilidade do Trae.24 À medida que mais serviços e ferramentas oferecem servidores MCP oficiais, o potencial para automação e integração dentro do Trae se expandirá exponencialmente. A abordagem do Trae para a configuração da IA o posiciona como um exemplo precoce e maduro de uma tendência que provavelmente se tornará padrão em IDEs de IA de próxima geração: tratar o comportamento e as capacidades da IA não como uma configuração, mas como código.
Referências citadas
Trae.ai, acessado em setembro 1, 2025, https://www.trae.ai/
Trae AI: A Guide With Practical Examples - DataCamp, acessado em setembro 1, 2025, https://www.datacamp.com/tutorial/trae-ai
Trae: Adaptive AI Code Editor - KDnuggets, acessado em setembro 1, 2025, https://www.kdnuggets.com/trae-adaptive-ai-code-editor
How to Configure AI Settings in Trae IDE, acessado em setembro 1, 2025, https://traeide.com/docs/trae-ide-ai-setting
Rules - Documentation - What is Trae IDE?, acessado em setembro 1, 2025, https://docs.trae.ai/ide/rules-for-ai
Trae IDE v1.3.0 Supports MCP Protocol & .rules Configuration, acessado em setembro 1, 2025, https://traeide.com/news/6
Best Practices for TRAE Rules | TRAE - Collaborate with Intelligence, acessado em setembro 1, 2025, https://www.trae.ai/blog/trae_tutorial_0825
TraeIDE, acessado em setembro 1, 2025, https://traeide.com/
Trae Rules 101 : r/Trae_ai - Reddit, acessado em setembro 1, 2025, https://www.reddit.com/r/Trae_ai/comments/1l05vkv/trae_rules_101/
Agent - Documentation - What is Trae IDE?, acessado em setembro 1, 2025, https://docs.trae.ai/ide/agent
How to Use Rules in Trae IDE - YouTube, acessado em setembro 1, 2025, https://www.youtube.com/watch?v=0XXiQ53mel4
Model Context Protocol (MCP) - Documentation - What is Trae IDE?, acessado em setembro 1, 2025, https://docs.trae.ai/ide/model-context-protocol
llms - full.txt - Model Context Protocol, acessado em setembro 1, 2025, https://modelcontextprotocol.io/llms-full.txt
What Is the Model Context Protocol (MCP) and How It Works - Descope, acessado em setembro 1, 2025, https://www.descope.com/learn/post/mcp
Salesforce MCP Servers: Technical Overview & Hands-On Lab - Cirra AI, acessado em setembro 1, 2025, https://cirra.ai/articles/pdfs/salesforce-mcp-servers-technical-guide.pdf
Trae AI- Better Than Cursor IDE? MCP Integration, Custom AI Agents With MCP Tutorials, acessado em setembro 1, 2025, https://www.youtube.com/watch?v=ObAFqcuX9MA
Trae AI a FREE AI Code Editor. Better than CURSOR ? - YouTube, acessado em setembro 1, 2025, https://www.youtube.com/watch?v=-ytktxe7oXY
Model context protocol (MCP) | Supabase Docs, acessado em setembro 1, 2025, https://supabase.com/docs/guides/getting-started/mcp
@Agent in TRAE - YouTube, acessado em setembro 1, 2025, https://www.youtube.com/watch?v=DEvrCpnQbsI
why all of this ??? : r/Trae_ai - Reddit, acessado em setembro 1, 2025, https://www.reddit.com/r/Trae_ai/comments/1mr0b13/why_all_of_this/
Cursor, Windsurf, Copilot, Trae... come, let me tell you about my crazy experiences. - Reddit, acessado em setembro 1, 2025, https://www.reddit.com/r/devsarg/comments/1jf8ax7/cursor_windsurf_copilot_trae_veni_te_cuento_mis/?tl=en
Trae is the go to, better the co-pilot as well : r/cursor - Reddit, acessado em setembro 1, 2025, https://www.reddit.com/r/cursor/comments/1lv8mzi/trae_is_the_go_to_better_the_copilot_as_well/
Privacy Mode is now available in TRAE IDE : r/Trae_ai - Reddit, acessado em setembro 1, 2025, https://www.reddit.com/r/Trae_ai/comments/1mx4muh/privacy_mode_is_now_available_in_trae_ide/
punkpeye/awesome-mcp-servers: A collection of MCP servers. - GitHub, acessado em setembro 1, 2025, https://github.com/punkpeye/awesome-mcp-servers
Trae Agent is an LLM-based agent for general purpose software engineering tasks. - GitHub, acessado em setembro 1, 2025, https://github.com/bytedance/trae-agent
Trae-CLI: Alternative To Gemini-cli & Claude Code - FULLY FREE & OPENSOURCE AI Coding Agent - YouTube, acessado em setembro 1, 2025, https://www.youtube.com/watch?v=EQtFs_7IeJM
Trae-CLI: RIP Claude Code? This FULLY FREE & OPENSOURCE AI Coder by BYTEDANCE is QUITE AMAZING! - YouTube, acessado em setembro 1, 2025, https://www.youtube.com/watch?v=4-6DAoeTWt0
Model Context Protocol - Wikipedia, acessado em setembro 1, 2025, https://en.wikipedia.org/wiki/Model_Context_Protocol
Model Context Protocol (MCP): Landscape, Security Threats, and Future Research Directions - arXiv, acessado em setembro 1, 2025, https://arxiv.org/html/2503.23278v2
