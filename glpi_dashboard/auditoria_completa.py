#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Auditoria Completa do Sistema de Ranking de T√©cnicos GLPI
Este script realiza uma auditoria completa de todas as funcionalidades implementadas.
"""

import sys
import os
import time
import requests
from datetime import datetime, timedelta

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def print_header(title):
    """Imprime um cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(f" {title}")
    print("="*60)

def print_section(title):
    """Imprime uma se√ß√£o formatada"""
    print(f"\n--- {title} ---")

def test_database_connection():
    """Testa a conex√£o com o banco de dados"""
    print_section("Testando Conex√£o com Banco de Dados")
    try:
        from services.glpi_service import GLPIService
        glpi_service = GLPIService()
        
        # Teste b√°sico de autentica√ß√£o
        result = glpi_service.authenticate()
        if result:
            print("‚úÖ Conex√£o com banco de dados: OK")
            return True
        else:
            print("‚ùå Conex√£o com banco de dados: FALHOU")
            return False
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return False

def test_technician_search():
    """Testa a busca de t√©cnicos"""
    print_section("Testando Busca de T√©cnicos")
    try:
        from services.glpi_service import GLPIService
        glpi_service = GLPIService()
        
        # Teste 1: Busca sem filtro
        print("Teste 1: Busca sem filtro de entidade")
        technician_ids, technician_names = glpi_service._get_all_technician_ids_and_names()
        print(f"   T√©cnicos encontrados: {len(technician_ids)}")
        if len(technician_ids) > 0:
            first_id = technician_ids[0]
            first_name = technician_names.get(first_id, f"T√©cnico {first_id}")
            print(f"   Primeiro t√©cnico: {first_name}")
            print("‚úÖ Busca sem filtro: OK")
        else:
            print("‚ùå Busca sem filtro: Nenhum t√©cnico encontrado")
            return False
        
        # Teste 2: Busca com filtro de entidade (CAU)
        print("\nTeste 2: Busca com filtro de entidade (CAU - ID: 1)")
        technician_ids_cau, technician_names_cau = glpi_service._get_all_technician_ids_and_names(entity_id=1)
        print(f"   T√©cnicos CAU encontrados: {len(technician_ids_cau)}")
        if len(technician_ids_cau) > 0:
            first_id_cau = technician_ids_cau[0]
            first_name_cau = technician_names_cau.get(first_id_cau, f"T√©cnico {first_id_cau}")
            print(f"   Primeiro t√©cnico CAU: {first_name_cau}")
            print("‚úÖ Busca com filtro: OK")
        else:
            print("‚ö†Ô∏è  Busca com filtro: Nenhum t√©cnico encontrado (pode ser normal)")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro na busca de t√©cnicos: {e}")
        return False

def test_ranking_logic():
    """Testa a l√≥gica de ranking"""
    print_section("Testando L√≥gica de Ranking")
    try:
        from services.glpi_service import GLPIService
        glpi_service = GLPIService()
        
        # Teste 1: Ranking sem filtro
        print("Teste 1: Ranking sem filtro de entidade")
        ranking = glpi_service.get_technician_ranking_with_filters()
        print(f"   T√©cnicos no ranking: {len(ranking)}")
        if len(ranking) > 0:
            top_tech = ranking[0]
            print(f"   Top 1: {top_tech.get('name', 'N/A')} - {top_tech.get('total', 0)} tickets")
            print("‚úÖ Ranking sem filtro: OK")
        else:
            print("‚ùå Ranking sem filtro: Nenhum resultado")
            return False
        
        # Teste 2: Ranking com filtro de entidade
        print("\nTeste 2: Ranking com filtro de entidade (CAU - ID: 1)")
        ranking_cau = glpi_service.get_technician_ranking_with_filters(entity_id=1)
        print(f"   T√©cnicos CAU no ranking: {len(ranking_cau)}")
        if len(ranking_cau) > 0:
            top_tech_cau = ranking_cau[0]
            print(f"   Top 1 CAU: {top_tech_cau.get('name', 'N/A')} - {top_tech_cau.get('total', 0)} tickets")
            print("‚úÖ Ranking com filtro: OK")
        else:
            print("‚ö†Ô∏è  Ranking com filtro: Nenhum resultado (pode ser normal)")
        
        # Teste 3: Ranking com filtro de data
        print("\nTeste 3: Ranking com filtro de data (√∫ltimos 30 dias)")
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        ranking_date = glpi_service.get_technician_ranking_with_filters(
            start_date=start_date.strftime('%Y-%m-%d'),
            end_date=end_date.strftime('%Y-%m-%d')
        )
        print(f"   T√©cnicos no ranking (30 dias): {len(ranking_date)}")
        if len(ranking_date) > 0:
            top_tech_date = ranking_date[0]
            print(f"   Top 1 (30 dias): {top_tech_date.get('name', 'N/A')} - {top_tech_date.get('total', 0)} tickets")
            print("‚úÖ Ranking com filtro de data: OK")
        else:
            print("‚ö†Ô∏è  Ranking com filtro de data: Nenhum resultado")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro na l√≥gica de ranking: {e}")
        return False

def test_api_endpoints():
    """Testa os endpoints da API"""
    print_section("Testando Endpoints da API")
    base_url = "http://localhost:5000/api"
    
    endpoints_tests = [
        {
            "name": "Busca de T√©cnicos",
            "url": f"{base_url}/technicians",
            "params": None
        },
        {
            "name": "Busca de T√©cnicos (CAU)",
            "url": f"{base_url}/technicians",
            "params": {"entity_id": 1}
        },
        {
            "name": "Ranking de T√©cnicos",
            "url": f"{base_url}/technicians/ranking",
            "params": None
        },
        {
            "name": "Ranking de T√©cnicos (CAU)",
            "url": f"{base_url}/technicians/ranking",
            "params": {"entity_id": 1}
        },
        {
            "name": "Ranking de T√©cnicos (30 dias)",
            "url": f"{base_url}/technicians/ranking",
            "params": {
                "start_date": (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),
                "end_date": datetime.now().strftime('%Y-%m-%d')
            }
        }
    ]
    
    all_passed = True
    
    for test in endpoints_tests:
        print(f"\nTestando: {test['name']}")
        try:
            start_time = time.time()
            response = requests.get(test['url'], params=test['params'], timeout=30)
            response_time = (time.time() - start_time) * 1000
            
            print(f"   Status: {response.status_code}")
            print(f"   Tempo de resposta: {response_time:.2f}ms")
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict):
                    if 'data' in data:
                        print(f"   Resultados: {len(data['data'])}")
                    elif 'technicians' in data:
                        print(f"   Resultados: {len(data['technicians'])}")
                    else:
                        print(f"   Estrutura: {list(data.keys())}")
                else:
                    print(f"   Resultados: {len(data) if isinstance(data, list) else 'N/A'}")
                print("‚úÖ Endpoint: OK")
            else:
                print(f"‚ùå Endpoint falhou: {response.text[:100]}")
                all_passed = False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro de conex√£o: {e}")
            all_passed = False
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
            all_passed = False
    
    return all_passed

def test_performance():
    """Testa a performance do sistema"""
    print_section("Testando Performance")
    base_url = "http://localhost:5000/api"
    
    # Teste de performance do ranking
    print("Teste de performance - Ranking completo")
    try:
        start_time = time.time()
        response = requests.get(f"{base_url}/technicians/ranking", timeout=60)
        response_time = (time.time() - start_time) * 1000
        
        print(f"   Tempo de resposta: {response_time:.2f}ms")
        
        if response_time < 10000:  # Menos de 10 segundos
            print("‚úÖ Performance: Excelente (< 10s)")
        elif response_time < 30000:  # Menos de 30 segundos
            print("‚ö†Ô∏è  Performance: Aceit√°vel (< 30s)")
        else:
            print("‚ùå Performance: Lenta (> 30s)")
            
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Erro no teste de performance: {e}")
        return False

def generate_audit_report():
    """Gera um relat√≥rio de auditoria completo"""
    print_header("AUDITORIA COMPLETA DO SISTEMA DE RANKING DE T√âCNICOS")
    print(f"Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    results = {
        "database": test_database_connection(),
        "technician_search": test_technician_search(),
        "ranking_logic": test_ranking_logic(),
        "api_endpoints": test_api_endpoints(),
        "performance": test_performance()
    }
    
    print_header("RESUMO DA AUDITORIA")
    
    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name.replace('_', ' ').title()}: {status}")
    
    print(f"\nResultado Geral: {passed_tests}/{total_tests} testes passaram")
    
    if passed_tests == total_tests:
        print("\nüéâ AUDITORIA COMPLETA: TODOS OS TESTES PASSARAM!")
        print("   O sistema est√° funcionando corretamente.")
    elif passed_tests >= total_tests * 0.8:  # 80% ou mais
        print("\n‚ö†Ô∏è  AUDITORIA COMPLETA: MAIORIA DOS TESTES PASSOU")
        print("   O sistema est√° funcionando, mas h√° algumas quest√µes.")
    else:
        print("\n‚ùå AUDITORIA COMPLETA: MUITOS TESTES FALHARAM")
        print("   O sistema precisa de corre√ß√µes.")
    
    print("\n" + "="*60)
    print(" FIM DA AUDITORIA")
    print("="*60)

if __name__ == "__main__":
    generate_audit_report()