version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: glpi_dashboard_mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: glpi_dashboard
      MYSQL_USER: glpi_user
      MYSQL_PASSWORD: glpi_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/database/init:/docker-entrypoint-initdb.d
    networks:
      - glpi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: glpi_dashboard_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - glpi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: glpi_dashboard_backend
    environment:
      - FLASK_APP=backend/app.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=mysql+pymysql://glpi_user:glpi_password@mysql:3306/glpi_dashboard
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev_secret_key_change_in_production
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - ./backend:/backend
      - ./app.py:/app.py
      - backend_logs:/app/logs
    networks:
      - glpi_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "python app.py"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: glpi_dashboard_frontend
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:5000/api
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - glpi_network
    depends_on:
      - backend
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0 --port 3000

  # Nginx Reverse Proxy (opcional para produção)
  nginx:
    image: nginx:alpine
    container_name: glpi_dashboard_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - glpi_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  glpi_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
