const fs = require('fs');
const path = require('path');

/**
 * Script para an√°lise de depend√™ncias n√£o utilizadas
 * Verifica package.json vs imports reais no c√≥digo
 */

class DependencyAnalyzer {
  constructor() {
    this.projectRoot = process.cwd();
    this.packageJsonPath = path.join(this.projectRoot, 'package.json');
    this.srcPath = path.join(this.projectRoot, 'src');
    this.usedDependencies = new Set();
    this.packageJson = null;
  }

  /**
   * Verifica se √© um m√≥dulo builtin do Node.js
   */
  isNodeBuiltin(moduleName) {
    const builtins = [
      'fs', 'path', 'url', 'util', 'os', 'crypto', 'http', 'https',
      'stream', 'events', 'buffer', 'querystring', 'zlib', 'child_process',
      'cluster', 'dgram', 'dns', 'net', 'readline', 'repl', 'tls', 'tty',
      'vm', 'worker_threads', 'assert', 'constants', 'module', 'perf_hooks',
      'process', 'punycode', 'string_decoder', 'timers', 'trace_events',
      'v8', 'wasi'
    ];
    return builtins.includes(moduleName.split('/')[0]);
  }

  /**
   * Carrega o package.json
   */
  loadPackageJson() {
    try {
      const content = fs.readFileSync(this.packageJsonPath, 'utf8');
      this.packageJson = JSON.parse(content);
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao carregar package.json:', error.message);
      return false;
    }
  }

  /**
   * Coleta todos os arquivos TypeScript/JavaScript
   */
  collectSourceFiles(dir = this.srcPath) {
    const files = [];

    if (!fs.existsSync(dir)) {
      console.warn(`‚ö†Ô∏è  Diret√≥rio n√£o encontrado: ${dir}`);
      return files;
    }

    const items = fs.readdirSync(dir);

    for (const item of items) {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory()) {
        // Pular node_modules e outros diret√≥rios irrelevantes
        if (!['node_modules', '.git', 'dist', 'build', 'coverage'].includes(item)) {
          files.push(...this.collectSourceFiles(fullPath));
        }
      } else if (stat.isFile()) {
        // Incluir apenas arquivos de c√≥digo
        if (/\.(ts|tsx|js|jsx)$/.test(item)) {
          files.push(fullPath);
        }
      }
    }

    return files;
  }

  /**
   * Analisa imports em um arquivo
   */
  analyzeFileImports(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const imports = [];

      // Regex para diferentes tipos de import
      const importPatterns = [
        // import { something } from 'package'
        /import\s+{[^}]*}\s+from\s+['"]([^'"]+)['"]/g,
        // import something from 'package'
        /import\s+\w+\s+from\s+['"]([^'"]+)['"]/g,
        // import * as something from 'package'
        /import\s+\*\s+as\s+\w+\s+from\s+['"]([^'"]+)['"]/g,
        // import 'package'
        /import\s+['"]([^'"]+)['"]/g,
        // require('package')
        /require\(['"]([^'"]+)['"]\)/g,
        // dynamic import()
        /import\(['"]([^'"]+)['"]\)/g
      ];

      for (const pattern of importPatterns) {
        let match;
        while ((match = pattern.exec(content)) !== null) {
          const importPath = match[1];

          // Filtrar apenas depend√™ncias externas (n√£o caminhos relativos, aliases ou m√≥dulos internos)
          if (!importPath.startsWith('.') &&
              !importPath.startsWith('/') &&
              !importPath.startsWith('@/') && // Path aliases
              !this.isNodeBuiltin(importPath)) {
            // Extrair nome do pacote (remover subpaths)
            const packageName = importPath.startsWith('@')
              ? importPath.split('/').slice(0, 2).join('/') // @scope/package
              : importPath.split('/')[0]; // package

            imports.push(packageName);
            this.usedDependencies.add(packageName);
          }
        }
      }

      return imports;
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Erro ao analisar ${filePath}:`, error.message);
      return [];
    }
  }

  /**
   * Analisa todos os arquivos do projeto
   */
  analyzeProject() {
    console.log('üîç Coletando arquivos do projeto...');
    const sourceFiles = this.collectSourceFiles();
    console.log(`üìÅ Encontrados ${sourceFiles.length} arquivos de c√≥digo`);

    console.log('\nüîç Analisando imports...');
    for (const file of sourceFiles) {
      this.analyzeFileImports(file);
    }

    console.log(`üì¶ Encontradas ${this.usedDependencies.size} depend√™ncias √∫nicas em uso`);
  }

  /**
   * Compara depend√™ncias declaradas vs utilizadas
   */
  findUnusedDependencies() {
    const { dependencies = {}, devDependencies = {} } = this.packageJson;
    const allDeclared = { ...dependencies, ...devDependencies };
    const declaredPackages = Object.keys(allDeclared);

    const unused = [];
    const missing = [];

    // Encontrar depend√™ncias n√£o utilizadas
    for (const declared of declaredPackages) {
      if (!this.usedDependencies.has(declared)) {
        // Verificar se √© uma depend√™ncia de build/dev que pode n√£o aparecer no c√≥digo
        const buildTools = [
          'vite', 'webpack', 'rollup', 'parcel',
          'typescript', 'eslint', 'prettier', 'husky', 'lint-staged',
          'vitest', 'jest', '@testing-library',
          '@types/', '@typescript-eslint/',
          'tailwindcss', 'postcss', 'autoprefixer'
        ];

        const isBuildTool = buildTools.some(tool =>
          declared.includes(tool) || declared.startsWith(tool)
        );

        if (!isBuildTool) {
          unused.push({
            name: declared,
            version: allDeclared[declared],
            type: dependencies[declared] ? 'dependency' : 'devDependency'
          });
        }
      }
    }

    // Encontrar depend√™ncias utilizadas mas n√£o declaradas
    for (const used of this.usedDependencies) {
      if (!declaredPackages.includes(used)) {
        missing.push(used);
      }
    }

    return { unused, missing };
  }

  /**
   * Gera relat√≥rio de an√°lise
   */
  generateReport() {
    const { unused, missing } = this.findUnusedDependencies();

    console.log('\n' + '='.repeat(60));
    console.log('üìä RELAT√ìRIO DE AN√ÅLISE DE DEPEND√äNCIAS');
    console.log('='.repeat(60));

    // Depend√™ncias n√£o utilizadas
    if (unused.length > 0) {
      console.log('\n‚ùå DEPEND√äNCIAS N√ÉO UTILIZADAS:');
      console.log('-'.repeat(40));

      unused.forEach(dep => {
        console.log(`  üì¶ ${dep.name} (${dep.version}) - ${dep.type}`);
      });

      console.log('\nüí° RECOMENDA√á√ïES:');
      console.log('  ‚Ä¢ Remover depend√™ncias n√£o utilizadas para reduzir bundle size');
      console.log('  ‚Ä¢ Executar: npm uninstall ' + unused.map(d => d.name).join(' '));
    } else {
      console.log('\n‚úÖ Nenhuma depend√™ncia n√£o utilizada encontrada!');
    }

    // Depend√™ncias faltantes
    if (missing.length > 0) {
      console.log('\n‚ö†Ô∏è  DEPEND√äNCIAS UTILIZADAS MAS N√ÉO DECLARADAS:');
      console.log('-'.repeat(40));

      missing.forEach(dep => {
        console.log(`  üì¶ ${dep}`);
      });

      console.log('\nüí° RECOMENDA√á√ïES:');
      console.log('  ‚Ä¢ Adicionar depend√™ncias faltantes ao package.json');
      console.log('  ‚Ä¢ Executar: npm install ' + missing.join(' '));
    } else {
      console.log('\n‚úÖ Todas as depend√™ncias utilizadas est√£o declaradas!');
    }

    // Estat√≠sticas
    console.log('\nüìà ESTAT√çSTICAS:');
    console.log('-'.repeat(40));
    const { dependencies = {}, devDependencies = {} } = this.packageJson;
    console.log(`  üì¶ Depend√™ncias declaradas: ${Object.keys(dependencies).length}`);
    console.log(`  üîß DevDepend√™ncias declaradas: ${Object.keys(devDependencies).length}`);
    console.log(`  ‚úÖ Depend√™ncias em uso: ${this.usedDependencies.size}`);
    console.log(`  ‚ùå Depend√™ncias n√£o utilizadas: ${unused.length}`);
    console.log(`  ‚ö†Ô∏è  Depend√™ncias faltantes: ${missing.length}`);

    // Economia potencial
    if (unused.length > 0) {
      console.log('\nüí∞ ECONOMIA POTENCIAL:');
      console.log('-'.repeat(40));
      console.log(`  ‚Ä¢ ${unused.length} pacotes podem ser removidos`);
      console.log('  ‚Ä¢ Redu√ß√£o no bundle size');
      console.log('  ‚Ä¢ Instala√ß√£o mais r√°pida');
      console.log('  ‚Ä¢ Menos vulnerabilidades potenciais');
    }

    console.log('\n' + '='.repeat(60));

    return { unused, missing };
  }

  /**
   * Executa an√°lise completa
   */
  run() {
    console.log('üöÄ Iniciando an√°lise de depend√™ncias...');

    if (!this.loadPackageJson()) {
      process.exit(1);
    }

    this.analyzeProject();
    const results = this.generateReport();

    // Exit code baseado nos resultados
    if (results.unused.length > 0 || results.missing.length > 0) {
      console.log('\n‚ö†Ô∏è  Problemas encontrados. Verifique as recomenda√ß√µes acima.');
      process.exit(1);
    } else {
      console.log('\n‚úÖ An√°lise conclu√≠da. Nenhum problema encontrado!');
      process.exit(0);
    }
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  const analyzer = new DependencyAnalyzer();
  analyzer.run();
}

module.exports = DependencyAnalyzer;
