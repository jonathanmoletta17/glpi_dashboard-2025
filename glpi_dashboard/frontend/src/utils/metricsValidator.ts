/**
 * Sistema de valida√ß√£o autom√°tica para m√©tricas do dashboard
 * Criado para garantir que as m√©tricas estejam funcionando corretamente
 */

export interface MetricsValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  data?: any;
}

export class MetricsValidator {
  private static readonly API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000/api';

  /**
   * Valida se o endpoint /api/metrics est√° retornando dados v√°lidos
   */
  static async validateMetricsEndpoint(): Promise<MetricsValidationResult> {
    const result: MetricsValidationResult = {
      isValid: true,
      errors: [],
      warnings: [],
    };

    try {
      console.log('üîç MetricsValidator - Testando endpoint /api/metrics...');

      const response = await fetch(`${this.API_BASE_URL}/api/metrics`);

      if (!response.ok) {
        result.isValid = false;
        result.errors.push(`Endpoint retornou status ${response.status}: ${response.statusText}`);
        return result;
      }

      const data = await response.json();
      result.data = data;

      // Validar estrutura b√°sica da resposta
      if (!data.success) {
        result.isValid = false;
        result.errors.push('Campo "success" n√£o √© true');
      }

      if (!data.data) {
        result.isValid = false;
        result.errors.push('Campo "data" n√£o encontrado na resposta');
        return result;
      }

      const metricsData = data.data;

      // Validar m√©tricas principais (totais gerais)
      const requiredMainMetrics = ['novos', 'pendentes', 'progresso', 'resolvidos'];
      for (const metric of requiredMainMetrics) {
        if (typeof metricsData[metric] !== 'number') {
          result.isValid = false;
          result.errors.push(`M√©trica principal "${metric}" n√£o √© um n√∫mero ou n√£o existe`);
        } else if (metricsData[metric] < 0) {
          result.warnings.push(
            `M√©trica principal "${metric}" tem valor negativo: ${metricsData[metric]}`
          );
        }
      }

      // Validar estrutura de n√≠veis
      if (!metricsData.niveis) {
        result.isValid = false;
        result.errors.push('Campo "niveis" n√£o encontrado nos dados');
      } else {
        const requiredLevels = ['n1', 'n2', 'n3', 'n4'];
        for (const level of requiredLevels) {
          if (!metricsData.niveis[level]) {
            result.isValid = false;
            result.errors.push(`N√≠vel "${level}" n√£o encontrado nos dados`);
          } else {
            // Validar m√©tricas de cada n√≠vel
            for (const metric of requiredMainMetrics) {
              if (typeof metricsData.niveis[level][metric] !== 'number') {
                result.isValid = false;
                result.errors.push(`M√©trica "${metric}" do n√≠vel "${level}" n√£o √© um n√∫mero`);
              }
            }
          }
        }
      }

      // Validar tend√™ncias
      if (!metricsData.tendencias) {
        result.warnings.push('Campo "tendencias" n√£o encontrado');
      } else {
        for (const metric of requiredMainMetrics) {
          if (!metricsData.tendencias[metric]) {
            result.warnings.push(`Tend√™ncia para "${metric}" n√£o encontrada`);
          }
        }
      }

      // Validar timestamp
      if (!metricsData.timestamp) {
        result.warnings.push('Campo "timestamp" n√£o encontrado');
      }

      console.log('‚úÖ MetricsValidator - Valida√ß√£o conclu√≠da:', result);
      return result;
    } catch (error) {
      result.isValid = false;
      result.errors.push(
        `Erro ao conectar com a API: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
      );
      console.error('‚ùå MetricsValidator - Erro na valida√ß√£o:', error);
      return result;
    }
  }

  /**
   * Valida se os dados est√£o sendo processados corretamente no frontend
   */
  static validateFrontendDataProcessing(metrics: any): MetricsValidationResult {
    const result: MetricsValidationResult = {
      isValid: true,
      errors: [],
      warnings: [],
    };

    console.log('üîç MetricsValidator - Validando processamento frontend:', metrics);

    if (!metrics) {
      result.isValid = false;
      result.errors.push('Objeto metrics √© null ou undefined');
      return result;
    }

    // Validar se as m√©tricas principais existem e s√£o n√∫meros
    const requiredMetrics = ['novos', 'pendentes', 'progresso', 'resolvidos'];
    for (const metric of requiredMetrics) {
      if (typeof metrics[metric] !== 'number') {
        result.isValid = false;
        result.errors.push(
          `M√©trica "${metric}" n√£o √© um n√∫mero: ${typeof metrics[metric]} = ${metrics[metric]}`
        );
      } else if (metrics[metric] === 0) {
        result.warnings.push(`M√©trica "${metric}" tem valor zero`);
      }
    }

    console.log('‚úÖ MetricsValidator - Valida√ß√£o frontend conclu√≠da:', result);
    return result;
  }

  /**
   * Executa valida√ß√£o completa do sistema de m√©tricas
   */
  static async runCompleteValidation(): Promise<{
    api: MetricsValidationResult;
    frontend?: MetricsValidationResult;
  }> {
    console.log('üöÄ MetricsValidator - Iniciando valida√ß√£o completa...');

    const apiValidation = await this.validateMetricsEndpoint();

    const results = {
      api: apiValidation,
      frontend: undefined as MetricsValidationResult | undefined,
    };

    // Se a API est√° funcionando, validar o processamento frontend
    if (apiValidation.isValid && apiValidation.data) {
      const frontendMetrics = {
        novos: apiValidation.data.data.novos,
        pendentes: apiValidation.data.data.pendentes,
        progresso: apiValidation.data.data.progresso,
        resolvidos: apiValidation.data.data.resolvidos,
      };
      results.frontend = this.validateFrontendDataProcessing(frontendMetrics);
    }

    console.log('üèÅ MetricsValidator - Valida√ß√£o completa finalizada:', results);
    return results;
  }
}

// Fun√ß√£o utilit√°ria para executar valida√ß√£o no console do navegador
(window as any).validateMetrics = () => {
  MetricsValidator.runCompleteValidation().then(results => {
    console.log('üìä Resultados da Valida√ß√£o de M√©tricas:', results);

    if (results.api.isValid && results.frontend?.isValid) {
      console.log('‚úÖ SUCESSO: Todas as valida√ß√µes passaram!');
    } else {
      console.log('‚ùå FALHA: Problemas encontrados nas valida√ß√µes');
      if (!results.api.isValid) {
        console.log('üî¥ Problemas na API:', results.api.errors);
      }
      if (results.frontend && !results.frontend.isValid) {
        console.log('üî¥ Problemas no Frontend:', results.frontend.errors);
      }
    }
  });
};

export default MetricsValidator;
