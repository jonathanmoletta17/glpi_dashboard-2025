# Pre-commit hooks configuration for GLPI Dashboard
# Install with: pip install pre-commit && pre-commit install

repos:
  # Python code formatting and linting
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        language_version: python3.12
        args: [--line-length=127]
        files: ^backend/

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=127]
        files: ^backend/

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=127, --max-complexity=10, --config=.flake8]
        files: ^backend/
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear

  # Python security
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, backend/, -ll, --skip=B101,B601]
        files: ^backend/

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: ^frontend/(node_modules|dist|build)/
      - id: end-of-file-fixer
        exclude: ^frontend/(node_modules|dist|build)/
      - id: check-yaml
        exclude: ^frontend/(node_modules|dist|build)/
      - id: check-json
        exclude: ^frontend/(node_modules|dist|build)/
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']
        exclude: '\.(bundle|zip|tar\.gz|tgz)$'
      - id: mixed-line-ending
        args: ['--fix=lf']
        exclude: ^frontend/(node_modules|dist|build)/

  # Frontend checks
  - repo: local
    hooks:
      - id: eslint
        name: ESLint
        entry: bash -c 'cd frontend && npm run lint'
        language: system
        files: ^frontend/src/.*\.(js|jsx|ts|tsx)$
        pass_filenames: false

      - id: prettier
        name: Prettier
        entry: bash -c 'cd frontend && npm run format:check'
        language: system
        files: ^frontend/src/.*\.(js|jsx|ts|tsx|json|css|md)$
        pass_filenames: false

  # TypeScript type checking
  - repo: local
    hooks:
      - id: typescript-check
        name: TypeScript type check
        entry: bash -c 'cd frontend && npm run type-check'
        language: system
        files: ^frontend/src/.*\.(ts|tsx)$
        pass_filenames: false

  # Python tests
  - repo: local
    hooks:
      - id: pytest-check
        name: pytest
        entry: bash -c 'cd backend && python -m pytest tests/unit/ -x -v'
        language: system
        files: ^backend/
        pass_filenames: false
        stages: [manual]

  # Frontend tests
  - repo: local
    hooks:
      - id: vitest-check
        name: vitest
        entry: bash -c 'cd frontend && npm run test:run'
        language: system
        files: ^frontend/src/
        pass_filenames: false
        stages: [manual]

  # Security checks
  - repo: local
    hooks:
      - id: safety-check
        name: safety check
        entry: bash -c 'cd backend && safety check -r requirements.txt || echo "Safety check completed with warnings"'
        language: system
        files: ^backend/requirements\.txt$
        pass_filenames: false

# Configuration
default_stages: [commit]
fail_fast: false

# To run specific hooks manually:
# pre-commit run --hook-stage manual pytest-check
# pre-commit run --hook-stage manual vitest-check
