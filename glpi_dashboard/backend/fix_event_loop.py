#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para corrigir o event loop do asyncio no Windows para compatibilidade com aiodns.
"""

import asyncio
import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio backend ao path
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

def configure_event_loop():
    """Configura o event loop correto para Windows."""
    if sys.platform == 'win32':
        # No Windows, usar SelectorEventLoop para compatibilidade com aiodns
        print("üîß Configurando SelectorEventLoop para Windows...")
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        print("‚úÖ Event loop configurado com sucesso")
    else:
        print("‚ÑπÔ∏è Sistema n√£o √© Windows, mantendo configura√ß√£o padr√£o")

def test_glpi_service():
    """Testa o GLPIService ap√≥s configurar o event loop."""
    print("\nüß™ Testando GLPIService...")
    
    try:
        from services.glpi_service import GLPIService
        
        # Criar inst√¢ncia do servi√ßo
        glpi_service = GLPIService()
        print("‚úÖ GLPIService criado com sucesso")
        
        # Testar obten√ß√£o de m√©tricas de forma s√≠ncrona
        import asyncio
        
        async def test_metrics():
            try:
                metrics = await glpi_service.get_metrics()
                print(f"‚úÖ M√©tricas obtidas: {type(metrics)}")
                return True
            except Exception as e:
                print(f"‚ùå Erro ao obter m√©tricas: {e}")
                return False
        
        # Executar teste
        result = asyncio.run(test_metrics())
        return result
        
    except Exception as e:
        print(f"‚ùå Erro no teste do GLPIService: {e}")
        return False

def main():
    """Fun√ß√£o principal."""
    print("CORRE√á√ÉO DO EVENT LOOP PARA GLPI DASHBOARD")
    print("=" * 50)
    
    # Configurar event loop
    configure_event_loop()
    
    # Testar GLPIService
    if test_glpi_service():
        print("\n‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Aplicar a corre√ß√£o no app.py principal")
        print("2. Reiniciar o servidor Flask")
        print("3. Testar os endpoints que usam GLPI")
    else:
        print("\n‚ùå AINDA H√Å PROBLEMAS COM O GLPI SERVICE")
        print("\nüîç Verifique:")
        print("1. Configura√ß√µes do GLPI (URL, tokens)")
        print("2. Conectividade de rede")
        print("3. Status do servidor GLPI")

if __name__ == "__main__":
    main()