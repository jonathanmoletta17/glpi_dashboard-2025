[project]
name = "glpi-dashboard"
version = "0.1.0"
description = "GLPI Dashboard - Sistema de monitoramento e mÃ©tricas para GLPI"
requires-python = ">=3.11"
dependencies = [
    "email-validator>=2.2.0",
    "flask-cors>=6.0.1",
    "flask>=3.1.1",
    "flask-sqlalchemy>=3.1.1",
    "flask-caching>=2.1.0",
    "gunicorn>=23.0.0",
    "psycopg2-binary>=2.9.10",
    "python-dotenv>=1.0.0",
    "requests>=2.32.4",
    "redis>=5.0.0",
    "hiredis>=2.3.0",
    "pydantic>=2.0.0",
    "prometheus_client>=0.19.0",
]

[tool.black]
line-length = 127
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded by ^/ will apply only to files and directories
# in the root of the project.
^/migrations/
'''

[tool.isort]
profile = "black"
line_length = 127
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["backend", "config", "utils", "services", "models", "tests"]
known_third_party = ["flask", "requests", "redis", "pytest", "unittest"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = [
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "*/.env/*",
    "*/node_modules/*",
    "*/build/*",
    "*/dist/*"
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "backend/tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
